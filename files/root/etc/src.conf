## Set to not build process accounting tools such as accton(8) and sa(8).
WITHOUT_ACCT=YES

## Set to not build acpiconf(8), acpidump(8) and related programs.
# WITHOUT_ACPI=YES

## Set to not build amd(8), and related programs.
WITHOUT_AMD=YES

## Set to not build apm(8), apmd(8) and related programs.
WITHOUT_APM=YES

## Set to compile programs and libraries without the assert(3) checks.
WITHOUT_ASSERT_DEBUG=YES

## Set to not build at(1) and related utilities.
# WITHOUT_AT=YES

## Set to not build programs and libraries related to ATM networking.
WITHOUT_ATM=YES

## Set to not build audit support into system programs.
# WITHOUT_AUDIT=YES

## Set to not build authpf(8).
# WITHOUT_AUTHPF=YES

## Set to not build autofs(5) related programs, libraries, and kernel
## modules.
# WITHOUT_AUTOFS=YES

## Set to not build or install bhyve(8), associated utilities, and
## examples.
## This option only affects amd64/amd64.
WITHOUT_BHYVE=YES

## Set to not build or install binutils (as, ld, objcopy, and objdump )
## as part of the normal system build. The resulting system cannot build
## programs from source.
# WITHOUT_BINUTILS=YES

## Set to not build binutils (as, ld, objcopy and objdump) as part of the
## bootstrap process. The option does not work for build targets unless
## some alternative toolchain is provided.
# WITHOUT_BINUTILS_BOOTSTRAP=YES

## Set this if you do not want to build blacklistd / blacklistctl.
# WITHOUT_BLACKLIST=YES

## Set to build some programs without blacklistd support, like
## fingerd(8), ftpd(8), rlogind(8), rshd(8), and sshd(8).
# WITHOUT_BLACKLIST_SUPPORT=YES

## Set to not build Bluetooth related kernel modules, programs and
## libraries.
WITHOUT_BLUETOOTH=YES

## Set to not build and install the portable BSD make (bmake) as make(1)
## instead of the traditional FreeBSD make. This build option is
## temporary. It allows developers to switch to the traditional FreeBSD
## make in order to work out any remaining kinks or issues. This option
## will be removed in due time.
# WITHOUT_BMAKE=YES

## Set to not build the boot blocks and loader.
# WITHOUT_BOOT=YES

## Set to not build or install bootparamd(8).
WITHOUT_BOOTPARAMD=YES

## Set to not build or install bootpd(8).
WITHOUT_BOOTPD=YES

## Set to not build bsdinstall(8), sade(8), and related programs.
WITHOUT_BSDINSTALL=YES

## Set to not build the BSD licensed version of cpio based on
## libarchive(3).
# WITHOUT_BSD_CPIO=YES

## Set to not build or install bsnmpd(1) and related libraries and data
## files.
# WITHOUT_BSNMP=YES

## Set to not build contributed bzip2 software as a part of the base
## system. The option has no effect yet.
# WITHOUT_BZIP2=YES

## Set to build some programs without optional bzip2 support.
# WITHOUT_BZIP2_SUPPORT=YES

## Set to not build calendar(1).
# WITHOUT_CALENDAR=YES

## Set to not build Capsicum support into system programs.
# WITHOUT_CAPSICUM=YES

## Set to not build Casper program and related libraries.
# WITHOUT_CASPER=YES

## Set to not build geom_ccd(4) and related utilities.
WITHOUT_CCD=YES

## Set to not build code licensed under Sun's CDDL.
# WITHOUT_CDDL=YES

## Set to not build the Clang C/C++ compiler during the regular phase of
## the build.
# WITHOUT_CLANG=YES

## Set to not build the Clang C/C++ compiler during the bootstrap phase
## of the build. You must enable either gcc or clang bootstrap to be
## able to build the system, unless an alternative compiler is provided
## via XCC.
# WITHOUT_CLANG_BOOTSTRAP=YES

## Set to avoid building the ARCMigrate, Rewriter and StaticAnalyzer
## components of the Clang C/C++ compiler.
# WITHOUT_CLANG_FULL=YES

## Set to install the GCC compiler as /usr/bin/cc, /usr/bin/c++ and
## /usr/bin/cpp.
# WITHOUT_CLANG_IS_CC=YES

## Set to not build cpp(1).
# WITHOUT_CPP=YES

## Set to not build any cross compiler in the cross-tools stage of
## buildworld. If you are compiling a different version of FreeBSD than
## what is installed on the system, you will need to provide an alternate
## compiler with XCC to ensure success. If you are compiling with an
## identical version of FreeBSD to the host, this option may be safely
## used. This option may also be safe when the host version of FreeBSD
## is close to the sources being built, but all bets are off if there
## have been any changes to the toolchain between the versions.
# WITHOUT_CROSS_COMPILER=YES

## Set to not build any crypto code.
# WITHOUT_CRYPT=YES

## Set to not build ctm(1) and related utilities.
WITHOUT_CTM=YES

## Set to not build CUSE-related programs and libraries.
# WITHOUT_CUSE=YES

## Set to not build CVS.
WITHOUT_CVS=YES

## Set to not build c++(1) and related libraries. It will also prevent
## building of gperf(1) and devd(8).
# WITHOUT_CXX=YES

## Set to avoid building or installing standalone debug files for each
## executable binary and shared library.
WITHOUT_DEBUG_FILES=YES

## Set to not build dialog(1), dialog(1,3), and dpv(1,3).
# WITHOUT_DIALOG=YES

## Set to not build the Webster dictionary files.
# WITHOUT_DICT=YES

## Set to not build dma Mail Transport Agent
WITHOUT_DMAGENT=YES

## Set to not to install compressed system documentation. Only the
## uncompressed version will be installed.
# WITHOUT_DOCCOMPRESS=YES

## Set this if you do not want to link /bin and /sbin dynamically.
# WITHOUT_DYNAMICROOT=YES

## Set to build ed(1) without support for encryption/decryption.
# WITHOUT_ED_CRYPTO=YES

## Set to not build and install edit(1), ee(1), and related programs.
WITHOUT_EE=YES

## Set not to build efivar(3) and efivar(8).
# WITHOUT_EFI=YES

## Set to not build ELF Tool Chain tools (addr2line, nm, size, strings
## and strip) as part of the bootstrap process. An alternate bootstrap
## tool chain must be provided.
# WITHOUT_ELFTOOLCHAIN_BOOTSTRAP=YES

## Set to avoid installing examples to /usr/share/examples/.
WITHOUT_EXAMPLES=YES

## Set to not build Flattened Device Tree support as part of the base
## system. This includes the device tree compiler (dtc) and libfdt
## support library.
WITHOUT_FDT=YES

## Set to not build file(1) and related programs.
# WITHOUT_FILE=YES

## Set to not build or install finger(1) and fingerd(8).
WITHOUT_FINGER=YES

## Set to not build or install programs for operating floppy disk driver.
WITHOUT_FLOPPY=YES

## Set to not build and install /usr/sbin/fmtree.
# WITHOUT_FMTREE=YES

## Set to not enable -fformat-extensions when compiling the kernel. Also
## disables all format checking.
# WITHOUT_FORMAT_EXTENSIONS=YES

## Set to build bootloaders without Forth support.
# WITHOUT_FORTH=YES

## Set to build libc without floating-point support.
# WITHOUT_FP_LIBC=YES

## Set to not build freebsd-update(8).
WITHOUT_FREEBSD_UPDATE=YES

## Set to not build or install ftp(1) and ftpd(8).
# WITHOUT_FTP=YES

## Set to not build games.
WITHOUT_GAMES=YES

## Set to not build and install gcc and g++ as part of the normal build
## process.
# WITHOUT_GCC=YES

## Set to not build gcc and g++ as part of the bootstrap process. You
## must enable either gcc or clang bootstrap to be able to build the
## system, unless an alternative compiler is provided via XCC.
# WITHOUT_GCC_BOOTSTRAP=YES

## Set to not build the gcov(1) tool.
WITHOUT_GCOV=YES

## Set to not build gdb(1).
# WITHOUT_GDB=YES

## Set to not build contributed GNU software as a part of the base
## system. This option can be useful if the system built must not
## contain any code covered by the GNU Public License due to legal
## reasons. The option has no effect yet.
# WITHOUT_GNU=YES

## Do not build the GNU C++ stack (g++, libstdc++). This is the default
## on platforms where clang is the system compiler.
# WITHOUT_GNUCXX=YES

## Set to not build GNU diff(1) and diff3(1).
# WITHOUT_GNU_DIFF=YES

## Set to not build GNU grep(1).
# WITHOUT_GNU_GREP=YES

## Set this option to omit the gnu extensions to grep from being included
## in BSD grep.
# WITHOUT_GNU_GREP_COMPAT=YES

## Set to build some programs without optional GNU support.
# WITHOUT_GNU_SUPPORT=YES

## Set to not build gpioctl(8) as part of the base system.
WITHOUT_GPIO=YES

## Set to build the BSD licensed version of the device tree compiler,
## instead of the GPL'd one from elinux.org.
# WITHOUT_GPL_DTC=YES

## Set to not build groff(1) and vgrind(1). You should consider
## installing the textproc/groff port to not break man(1).
# WITHOUT_GROFF=YES

## Set to not build libgssapi.
# WITHOUT_GSSAPI=YES

## Set to not build hastd(8) and related utilities.
WITHOUT_HAST=YES

## Set to not build HTML docs.
WITHOUT_HTML=YES

## Set to not build or install HyperV utilities.
WITHOUT_HYPERV=YES

## Set to not build iconv as part of libc.
# WITHOUT_ICONV=YES

## Set to not install header files. This option used to be spelled
## NO_INCS. The option does not work for build targets.
# WITHOUT_INCLUDES=YES

## Set to not build programs and libraries related to IPv4 networking.
# WITHOUT_INET=YES

## Set to not build programs and libraries related to IPv6 networking.
WITHOUT_INET6=YES

## Set to build libraries, programs, and kernel modules without IPv6
## support.
WITHOUT_INET6_SUPPORT=YES

## Set to not build inetd(8).
# WITHOUT_INETD=YES

## Set to build libraries, programs, and kernel modules without IPv4
## support.
# WITHOUT_INET_SUPPORT=YES

## Set to not make or install info(5) files.
# WITHOUT_INFO=YES

## Set this if you do not want to install optional libraries. For
## example when creating a nanobsd(8) image. The option does not work
## for build targets.
# WITHOUT_INSTALLLIB=YES

## Set to not build IP Filter package.
WITHOUT_IPFILTER=YES

## Set to not build IPFW tools.
WITHOUT_IPFW=YES

## Set to not build iscid(8) and related utilities.
WITHOUT_ISCSI=YES

## Set to not build tools for the support of jails; e.g., jail(8).
# WITHOUT_JAIL=YES

## Set to not build kdump(1) and truss(1).
# WITHOUT_KDUMP=YES

## Set this if you do not want to build Kerberos 5 (KTH Heimdal).
# WITHOUT_KERBEROS=YES

## Set to build some programs without Kerberos support, like ssh(1),
## telnet(1), sshd(8), and telnetd(8).
# WITHOUT_KERBEROS_SUPPORT=YES

## Set to not install kernel symbol files. This option is recommended
## for those people who have small root partitions.
WITHOUT_KERNEL_SYMBOLS=YES

## Set to not build the libkvm library as a part of the base system. The
## option has no effect yet.
# WITHOUT_KVM=YES

## Set to build some programs without optional libkvm support.
# WITHOUT_KVM_SUPPORT=YES

## Setting this variable will prevent the LDNS library from being built.
WITHOUT_LDNS=YES

## Setting this variable will prevent building the LDNS utilities
## drill(1) and host(1).
WITHOUT_LDNS_UTILS=YES

## Set to not build programs that support a legacy PC console; e.g.,
## kbdcontrol(1) and vidcontrol(1).
WITHOUT_LEGACY_CONSOLE=YES

## On 64-bit platforms, set to not build 32-bit library set and a
## ld-elf32.so.1 runtime linker.
# WITHOUT_LIB32=YES

## Set to avoid building libcxxrt and libc++.
# WITHOUT_LIBCPLUSPLUS=YES

## Set to not build the libpthread providing library, libthr.
# WITHOUT_LIBPTHREAD=YES

## Set to not build the libthr (1:1 threading) library.
# WITHOUT_LIBTHR=YES

## Set to not build LLVM's lld linker.
# WITHOUT_LLD=YES

## Set to not build the LLDB debugger.
WITHOUT_LLDB=YES

## Set to use GNU binutils ld as the system linker, instead of LLVM's
## LLD.
# WITHOUT_LLD_IS_LD=YES

## Set to use GCC's stack unwinder (instead of LLVM's libunwind).
# WITHOUT_LLVM_LIBUNWIND=YES

## Set to not build localization files; see locale(1).
# WITHOUT_LOCALES=YES

## Set to not build locate(1) and related programs.
# WITHOUT_LOCATE=YES

## Set to not build lpr(1) and related programs.
WITHOUT_LPR=YES

## Set to build ls(1) without support for colors to distinguish file
## types.
# WITHOUT_LS_COLORS=YES

## Set to build some programs without optional lzma compression support.
# WITHOUT_LZMA_SUPPORT=YES

## Set to not build any mail support (MUA or MTA).
WITHOUT_MAIL=YES

## Set to not build the mailwrapper(8) MTA selector.
WITHOUT_MAILWRAPPER=YES

## Set to not install make(1) and related support files.
# WITHOUT_MAKE=YES

## Set to not build manual pages.
# WITHOUT_MAN=YES

## Set to not to install compressed man pages. Only the uncompressed
## versions will be installed.
# WITHOUT_MANCOMPRESS=YES

## Use the version of makewhatis(1) introduced in FreeBSD 2.1, instead of
## the makewhatis(8) database and utilities from mandoc(1).
# WITHOUT_MANDOCDB=YES

## Set to not build utilities for manual pages, apropos(1), catman(1),
## makewhatis(1), man(1), whatis(1), manctl(8), and related support
## files.
# WITHOUT_MAN_UTILS=YES

## Set to not build the NAND Flash components.
WITHOUT_NAND=YES

## Set to not build programs, libraries, and kernel modules related to
## NetWare Core protocol.
WITHOUT_NCP=YES

## Set to not build programs and libraries related to NDIS emulation
## support.
WITHOUT_NDIS=YES

## Set to not build nc(1) utility.
# WITHOUT_NETCAT=YES

## Set to not build applications to support netgraph(4).
WITHOUT_NETGRAPH=YES

## Set to build libraries, programs, and kernel modules without netgraph
## support.
WITHOUT_NETGRAPH_SUPPORT=YES

## Set to not build NIS(8) support and related programs. If set, you
## might need to adopt your nsswitch.conf(5) and remove `nis' entries.
WITHOUT_NIS=YES

## Set to not build NLS catalogs.
# WITHOUT_NLS=YES

## Set to not build NLS catalog support for csh(1).
# WITHOUT_NLS_CATALOGS=YES

## Set to disable name caching in the nsswitch subsystem. The generic
## caching daemon, nscd(8), will not be built either if this option is
## set.
WITHOUT_NS_CACHING=YES

## Set to not build ntpd(8) and related programs.
# WITHOUT_NTP=YES

## Set to not build OpenSSH.
# WITHOUT_OPENSSH=YES

## Set to not build OpenSSL.
# WITHOUT_OPENSSL=YES

## Set to not build PAM library and modules. This option is deprecated
## and does nothing.
# WITHOUT_PAM=YES

## Set to build some programs without PAM support, particularly ftpd(8)
## and ppp(8).
# WITHOUT_PAM_SUPPORT=YES

## Set to not build pc-sysinstall(8) and related programs.
WITHOUT_PC_SYSINSTALL=YES

## Set to not build PF firewall package.
# WITHOUT_PF=YES

## Set to not build pkg(7) bootstrap tool.
# WITHOUT_PKGBOOTSTRAP=YES

## Set to not build pmccontrol(8) and related programs.
WITHOUT_PMC=YES

## Set to not build or install portsnap(8) and related files.
WITHOUT_PORTSNAP=YES

## Set to not build ppp(8) and related programs.
WITHOUT_PPP=YES

## Set to avoid compiling profiled libraries.
WITHOUT_PROFILE=YES

## Set to not build quota(1) and related programs.
WITHOUT_QUOTAS=YES

## Set to not build radius support into various applications, like
## pam_radius(8) and ppp(8).
WITHOUT_RADIUS_SUPPORT=YES

## Set to not build or install rbootd(8).
WITHOUT_RBOOTD=YES

## Disable building of the BSD r-commands. This includes rlogin(1),
## rsh(1), etc.
WITHOUT_RCMDS=YES

## Set to not build rescue(8).
# WITHOUT_RESCUE=YES

## Set to not build routed(8) utility.
WITHOUT_ROUTED=YES

## Set to not build sendmail(8) and related programs.
WITHOUT_SENDMAIL=YES

## Set this to disable the installation of login(1) as a set-user-ID root
## program.
WITHOUT_SETUID_LOGIN=YES

## Set to not build the 4.4BSD legacy docs.
WITHOUT_SHAREDOCS=YES

## Set to not build kernel modules that include sourceless code (either
## microcode or native code for host CPU).
# WITHOUT_SOURCELESS=YES

## Set to not build kernel modules that include sourceless native code
## for host CPU.
# WITHOUT_SOURCELESS_HOST=YES

## Set to not build kernel modules that include sourceless microcode.
# WITHOUT_SOURCELESS_UCODE=YES

## Set to not build world with propolice stack smashing protection.
# WITHOUT_SSP=YES

## Set to not build svnlite(1) and related programs.
# WITHOUT_SVNLITE=YES

## Set to disable symbol versioning when building shared libraries.
# WITHOUT_SYMVER=YES

## Set to not build syscons(4) support files such as keyboard maps,
## fonts, and screen output maps.
WITHOUT_SYSCONS=YES

## Set to not opportunistically skip building a cross-compiler during the
## bootstrap phase of the build. Normally, if the currently installed
## compiler matches the planned bootstrap compiler type and revision,
## then it will not be built. This does not prevent a compiler from
## being built for installation though, only for building one for the
## build itself. The WITHOUT_CLANG and WITHOUT_GCC options control
## those.
# WITHOUT_SYSTEM_COMPILER=YES

## Set to not build or install talk(1) and talkd(8).
WITHOUT_TALK=YES

## Set to not build or install tcpd(8), and related utilities.
# WITHOUT_TCP_WRAPPERS=YES

## Set to not build and install /bin/csh (which is tcsh(1)).
# WITHOUT_TCSH=YES

## Set to not build telnet(1) and related programs.
# WITHOUT_TELNET=YES

## Set to not build nor install the FreeBSD Test Suite in /usr/tests/.
## See tests(7) for more details. This also disables the build of all
## test-related dependencies, including ATF.
WITHOUT_TESTS=YES

## Set to disables the build of all test-related dependencies, including
## ATF.
WITHOUT_TESTS_SUPPORT=YES

## Set to not build programs used for text processing.
# WITHOUT_TEXTPROC=YES

## Set to not build or install tftp(1) and tftpd(8).
# WITHOUT_TFTP=YES

## Set to not build or install timed(8).
WITHOUT_TIMED=YES

## Set to not install header or programs used for program development,
## compilers, debuggers etc.
# WITHOUT_TOOLCHAIN=YES

## Set to not build unbound(8) and related programs.
WITHOUT_UNBOUND=YES

## Set to not build USB-related programs and libraries.
# WITHOUT_USB=YES

## Set to not build USB gadget kernel modules.
WITHOUT_USB_GADGET_EXAMPLES=YES

## Set to not build user accounting tools such as last(1), users(1),
## who(1), ac(8), lastlogin(8) and utx(8).
# WITHOUT_UTMPX=YES

## Set to not build and install vi, view, ex and related programs.
# WITHOUT_VI=YES

## Set to not build vt(4) support files (fonts and keymaps).
# WITHOUT_VT=YES

## Set this to not add warning flags to the compiler invocations. Useful
## as a temporary workaround when code enters the tree which triggers
## warnings in environments that differ from the original developer.
# WITHOUT_WARNS=YES

## Set to not build programs used for 802.11 wireless networks;
## especially wpa_supplicant(8) and hostapd(8).
WITHOUT_WIRELESS=YES

## Set to build libraries, programs, and kernel modules without 802.11
## wireless support.
WITHOUT_WIRELESS_SUPPORT=YES

## Build wpa_supplicant(8) without support for the IEEE 802.1X protocol
## and without support for EAP-PEAP, EAP-TLS, EAP-LEAP, and EAP-TTLS
## protocols (usable only via 802.1X).
WITHOUT_WPA_SUPPLICANT_EAPOL=YES

## Set to not build ZFS file system.
# WITHOUT_ZFS=YES

## Set to not build the timezone database.
# WITHOUT_ZONEINFO=YES

## Enable automatic creation of objdirs.
# WITH_AUTO_OBJ=YES

## Set to build and install binutils (as, ld, objcopy, and objdump) as
## part of the normal system build.
# WITH_BINUTILS=YES

## Set build binutils (as, ld, objcopy and objdump) as part of the
## bootstrap process.
# WITH_BINUTILS_BOOTSTRAP=YES

## Install BSD-licensed grep as '[ef]grep' instead of GNU grep.
WITH_BSD_GREP=YES

## Set to use ccache(1) for the build. No configuration is required
## except to install the devel/ccache package. Using with distcc(1)
## should set CCACHE_PREFIX=/usr/local/bin/distcc. The default cache
## directory of $HOME/.ccache will be used, which can be overridden by
## setting CCACHE_DIR. The CCACHE_COMPILERCHECK option defaults to
## content when using the in-tree bootstrap compiler, and mtime when
## using an external compiler. The CCACHE_CPP2 option is used for Clang
## but not GCC.
## Sharing a cache between multiple work directories requires using a
## layout similar to /some/prefix/src /some/prefix/obj and an environment
## such as:
##  CCACHE_BASEDIR='${SRCTOP:H}' MAKEOBJDIRPREFIX='${SRCTOP:H}/obj'
## See ccache(1) for more configuration options.
# WITH_CCACHE_BUILD=YES

## Set to build the Clang C/C++ compiler during the normal phase of the
## build.
# WITH_CLANG=YES

## Set to build the Clang C/C++ compiler during the bootstrap phase of
## the build.
# WITH_CLANG_BOOTSTRAP=YES

## Set to build additional clang and llvm tools, such as bugpoint.
# WITH_CLANG_EXTRAS=YES

## Set to build the ARCMigrate, Rewriter and StaticAnalyzer components of
## the Clang C/C++ compiler.
# WITH_CLANG_FULL=YES

## Set to install the Clang C/C++ compiler as /usr/bin/cc, /usr/bin/c++
## and /usr/bin/cpp.
# WITH_CLANG_IS_CC=YES

## Set to compile with CTF (Compact C Type Format) data. CTF data
## encapsulates a reduced form of debugging information similar to DWARF
## and the venerable stabs and is required for DTrace.
# WITH_CTF=YES

## Set to strip debug info into a separate file for each executable
## binary and shared library. The debug files will be placed in a
## subdirectory of /usr/lib/debug and are located automatically by
## gdb(1).
# WITH_DEBUG_FILES=YES

## This is an experimental build system. For details see
## http://www.crufty.net/sjg/docs/freebsd-meta-mode.htm. Build commands
## can be seen from the top-level with:
##  make show-valid-targets
## The build is driven by dirdeps.mk using DIRDEPS stored in
## Makefile.depend files found in each directory.
## The build can be started from anywhere, and behaves the same. The
## initial instance of make(1) recursively reads DIRDEPS from
## Makefile.depend computing a graph of tree dependencies from the
## current origin. Setting NO_DIRDEPS will skip checking dirdep
## dependencies and will only build in the current and child directories.
## NO_DIRDEPS_BELOW will skip building any dirdeps and only build the
## current directory.
## This also utilizes the WITH_META_MODE logic for incremental builds.
## The build will hide commands ran unless NO_SILENT is defined.
## Note that there is currently no mass install feature for this.
# WITH_DIRDEPS_BUILD=YES

## Cache result of dirdeps.mk which can save significant time for
## subsequent builds. Depends on WITH_DIRDEPS_BUILD.
# WITH_DIRDEPS_CACHE=YES

## Set to build and install the DTrace test suite in
## /usr/tests/cddl/usr.sbin/dtrace. This test suite is considered
## experimental on architectures other than amd64/amd64 and running it
## may cause system instability.
# WITH_DTRACE_TESTS=YES

## Set to build efivar(3) and efivar(8).
# WITH_EFI=YES

## Set to build EISA kernel modules.
# WITH_EISA=YES

## Set to build extra TCP stack modules.
# WITH_EXTRA_TCP_STACKS=YES

## Set to build Flattened Device Tree support as part of the base system.
## This includes the device tree compiler (dtc) and libfdt support
## library.
# WITH_FDT=YES

## Set to build and install gcc and g++.
# WITH_GCC=YES

## Set to build gcc and g++ as part of the bootstrap process.
# WITH_GCC_BOOTSTRAP=YES

## Set to build gdb(1).
# WITH_GDB=YES

## Build the GNU C++ stack (g++, libstdc++). This is the default on
## platforms where gcc is the system compiler.
# WITH_GNUCXX=YES

## Set to build the GPL'd version of the device tree compiler from
## elinux.org, instead of the BSD licensed one.
# WITH_GPL_DTC=YES

## Set to build Hesiod support.
# WITH_HESIOD=YES

## Set to make install targets succeed for non-root users by installing
## files with owner and group attributes set to that of the user running
## the make(1) command. The user still has to set the DESTDIR variable
## to point to a directory where the user has write permissions.
# WITH_INSTALL_AS_USER=YES

## Set to build libcxxrt and libc++.
# WITH_LIBCPLUSPLUS=YES

## On armv6 only, set to enable soft float ABI compatibility libraries.
## This option is for transitioning to the new hard float ABI.
# WITH_LIBSOFT=YES

## Set to build LLVM's lld linker.
# WITH_LLD=YES

## Set to build the LLDB debugger.
# WITH_LLDB=YES

## Set to use LLVM's LLD as the system linker, instead of GNU binutils
## ld.
# WITH_LLD_IS_LD=YES

## Set to use LLVM's libunwind stack unwinder (instead of GCC's
## unwinder).
# WITH_LLVM_LIBUNWIND=YES

## Creates make(1) meta files when building, which can provide a reliable
## incremental build when using filemon(4). The meta file is created in
## the OBJDIR as target.meta. These meta files track the command ran,
## its output, and the current directory. The filemon(4) module is
## required unless NO_FILEMON is defined. When the module is loaded, any
## files used by the commands executed will be tracked as dependencies
## for the target in its meta file. The target will be considered out-
## of-date and rebuilt if any of the following are true compared to the
## last build:
## o The command to execute changes.
## o The current working directory changes.
## o The target's meta file is missing.
## o The target's meta file is missing filemon data when filemon is
##  loaded and a previous run did not have it loaded.
## o [requires filemon(4)] Files read, executed or linked to are newer
##  than the target.
## o [requires filemon(4)] Files read, written, executed or linked are
##  missing.
## The meta files can also be useful for debugging.
## The build will hide commands ran unless NO_SILENT is defined. Errors
## will cause make(1) to show some of its environment for further
## debugging.
## The build operates as it normally would otherwise. This option
## originally invoked a different build system but that was renamed to
## WITH_DIRDEPS_BUILD.
# WITH_META_MODE=YES

## Set to build the NAND Flash components.
# WITH_NAND=YES

## Set to build the ``OpenFabrics Enterprise Distribution'' Infiniband
## software stack.
# WITH_OFED=YES

## Enable building openldap support for kerberos.
# WITH_OPENLDAP=YES

## Set to exclude build metadata (such as the build time, user, or host)
## from the kernel, boot loaders, and uname output, so that builds
## produce bit-for-bit identical output.
# WITH_REPRODUCIBLE_BUILD=YES

## Set to build the toolchain binaries shared. The set includes cc(1),
## make(1) and necessary utilities like assembler, linker and library
## archive manager.
WITH_SHARED_TOOLCHAIN=YES

## Set to enable threads in sort(1).
WITH_SORT_THREADS=YES

## Set to build world with propolice stack smashing protection.
# WITH_SSP=YES

## Enable staging of files to a stage tree. This can be best thought of
## as auto-install to DESTDIR with some extra meta data to ensure
## dependencies can be tracked. Depends on WITH_DIRDEPS_BUILD.
# WITH_STAGING=YES

## Enable staging of MAN pages to stage tree.
# WITH_STAGING_MAN=YES

## Enable staging of PROGs to stage tree.
# WITH_STAGING_PROG=YES

## Check staged files are not stale.
# WITH_STALE_STAGED=YES

## Set to install svnlite(1) as svn(1).
WITH_SVN=YES

## Enable use of sysroot during build. Depends on WITH_DIRDEPS_BUILD.
# WITH_SYSROOT=YES

## Set to opportunistically skip building a cross-compiler during the
## bootstrap phase of the build. If the currently installed compiler
## matches the planned bootstrap compiler type and revision, then it will
## not be built. This does not prevent a compiler from being built for
## installation though, only for building one for the build itself. The
## WITHOUT_CLANG and WITHOUT_GCC options control those.
# WITH_SYSTEM_COMPILER=YES

## Set to build USB gadget kernel modules.
# WITH_USB_GADGET_EXAMPLES=YES

